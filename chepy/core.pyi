from .modules.internal.colors import blue as blue, cyan as cyan, green as green, magenta as magenta, red as red, yellow as yellow
from typing import Any, List, Tuple, Union

jsonpickle: Any

class ChepyDecorators:
    @staticmethod
    def call_stack(func: Any, *args: Any, **kwargs: Any): ...

class ChepyCore:
    states: Any = ...
    buffers: Any = ...
    write: Any = ...
    bake: Any = ...
    cyberchef: Any = ...
    read_file: Any = ...
    log_level: Any = ...
    log_format: str = ...
    def __init__(self, *data: Any) -> None: ...
    @property
    def state(self): ...
    @state.setter
    def state(self, val: Any) -> None: ...
    def fork(self, methods: List[Tuple[Union[str, object], dict]]) -> Any: ...
    def set_state(self, data: Any) -> Any: ...
    def create_state(self): ...
    def copy_state(self, index: int=...) -> Any: ...
    def change_state(self, index: int) -> Any: ...
    def switch_state(self, index: int) -> Any: ...
    def delete_state(self, index: int) -> Any: ...
    def get_state(self, index: int) -> Any: ...
    def save_buffer(self, index: int=...) -> Any: ...
    def load_buffer(self, index: int) -> Any: ...
    def delete_buffer(self, index: int) -> Any: ...
    def substring(self, pattern: Union[str, bytes], group: int=...) -> Any: ...
    @property
    def o(self): ...
    @property
    def output(self): ...
    def out(self) -> Any: ...
    def out_as_str(self) -> str: ...
    def out_as_bytes(self) -> bytes: ...
    def get_by_index(self, index: int) -> Any: ...
    def get_by_key(self, key: str) -> Any: ...
    def copy_to_clipboard(self) -> None: ...
    def copy(self) -> None: ...
    def web(self, magic: bool=..., cyberchef_url: str=...) -> None: ...
    def http_request(self, method: str=..., params: dict=..., json: dict=..., headers: dict=..., cookies: dict=...) -> Any: ...
    def load_from_url(self, method: str=..., params: dict=..., json: dict=..., headers: dict=..., cookies: dict=...) -> Any: ...
    def load_dir(self, pattern: str=...) -> Any: ...
    def load_file(self, binary_mode: bool=...) -> Any: ...
    def write_to_file(self, path: str) -> None: ...
    def write_binary(self, path: str) -> None: ...
    def save_recipe(self, path: str) -> Any: ...
    def load_recipe(self, path: str) -> Any: ...
    def run_script(self, path: str, save_state: bool=...) -> Any: ...
    def loop(self, iterations: int, callback: str, args: dict=...) -> Any: ...
    def loop_list(self, callback: str, args: dict=...) -> Any: ...
    def loop_dict(self, keys: list, callback: str, args: dict=...) -> Any: ...
    def debug(self, verbose: bool=...) -> Any: ...
    def reset(self): ...
    def load_command(self): ...
    def pretty(self, indent: int=...) -> Any: ...
    def plugins(self, enable: str) -> None: ...
    def set_plugin_path(self, path: str) -> None: ...
