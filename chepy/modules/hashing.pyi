from ..core import ChepyCore as ChepyCore, ChepyDecorators as ChepyDecorators
from typing import Any, Union
from typing_extensions import Literal as Literal

hashid: Any
hmac: Any
MD2: Any
MD4: Any
MD5: Any
SHA512: Any
SHA1: Any
SHA256: Any
keccak: Any
SHAKE128: Any
SHAKE256: Any
RIPEMD: Any
BLAKE2s: Any
BLAKE2b: Any
KDF: Any

class Hashing(ChepyCore):
    def __init__(self, *data: Any) -> None: ...
    state: Any = ...
    def identify_hash(self): ...
    def sha1(self): ...
    def sha2_256(self): ...
    def sha2_512(self): ...
    def sha2_512_truncate(self, truncate: int=...) -> Any: ...
    def sha2_384(self): ...
    def sha2_224(self): ...
    def sha3_512(self): ...
    def sha3_256(self): ...
    def sha3_384(self): ...
    def sha3_224(self): ...
    def md2(self): ...
    def md4(self): ...
    def md5(self): ...
    def keccak_512(self): ...
    def keccak_384(self): ...
    def keccak_256(self): ...
    def keccak_224(self): ...
    def shake_256(self, size: int=...) -> Any: ...
    def shake_128(self, size: int=...) -> Any: ...
    def ripemd_160(self): ...
    def blake_2b(self, bits: int=..., key: bytes=...) -> Any: ...
    def blake_2s(self, bits: int=..., key: bytes=...) -> Any: ...
    def crc8_checksum(self): ...
    def crc16_checksum(self): ...
    def crc32_checksum(self): ...
    def hmac_hash(self, key: bytes=..., digest: str=...) -> Any: ...
    def derive_pbkdf2_key(self, password: Union[str, bytes], salt: Union[str, bytes], key_size: int=..., iterations: int=..., hash_type: Literal[md5, sha1, sha256, sh512]=..., hex_salt: bool=..., show_full_key: bool=...) -> Any: ...
    def bcrypt_hash(self, rounds: int=...) -> Any: ...
    def bcrypt_compare(self, hash: str) -> Any: ...
    def scrypt_hash(self, salt: str=..., key_length: int=..., N: int=..., r: int=..., p: int=...) -> Any: ...
